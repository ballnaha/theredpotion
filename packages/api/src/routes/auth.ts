import express from 'express';
import { z } from 'zod';
import { prisma } from '@theredpotion/database';
import { loginWithEmail, loginWithLine } from '../utils/auth';

const router = express.Router();

// Validation schemas
const emailLoginSchema = z.object({
  email: z.string().email('‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'),
  password: z.string().min(6, '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'),
});

const lineLoginSchema = z.object({
  lineId: z.string().min(1, 'LINE ID ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
  lineProfile: z.object({
    displayName: z.string().min(1, '‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'),
    email: z.string().email().optional(),
    pictureUrl: z.string().url().optional(),
  }),
});

// üìß Email/Password Login (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin, Restaurant, Rider)
router.post('/login/email', async (req, res) => {
  try {
    const validatedData = emailLoginSchema.parse(req.body);
    const { email, password } = validatedData;

    const result = await loginWithEmail(email, password, prisma);

    if (!result.success) {
      return res.status(401).json({
        success: false,
        message: result.message,
      });
    }

    return res.json({
      success: true,
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        user: result.user,
        token: result.token,
      },
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        success: false,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        errors: error.errors,
      });
    }

    console.error('Email login route error:', error);
    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
    });
  }
});

// üíö LINE Login (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Customer)
router.post('/login/line', async (req, res) => {
  try {
    const validatedData = lineLoginSchema.parse(req.body);
    const { lineId, lineProfile } = validatedData;

    const result = await loginWithLine(lineId, lineProfile, prisma);

    if (!result.success) {
      return res.status(401).json({
        success: false,
        message: result.message,
      });
    }

    return res.json({
      success: true,
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        user: result.user,
        token: result.token,
      },
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        success: false,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        errors: error.errors,
      });
    }

    console.error('LINE login route error:', error);
    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
    });
  }
});

// üîç Get Current User Profile
router.get('/me', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        message: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Authorization header',
      });
    }

    const token = authHeader.substring(7);
    const jwt = require('jsonwebtoken');
    
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      
      const user = await prisma.user.findUnique({
        where: { id: decoded.userId },
        select: {
          id: true,
          email: true,
          firstName: true,
          lastName: true,
          role: true,
          status: true,
          loginProvider: true,
          lineId: true,
          lineDisplayName: true,
          linePictureUrl: true,
          phone: true,
          avatar: true,
          createdAt: true,
          lastLoginAt: true,
        },
      });

      if (!user) {
        return res.status(404).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        });
      }

      return res.json({
        success: true,
        data: { user },
      });
    } catch (jwtError) {
      return res.status(401).json({
        success: false,
        message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      });
    }
  } catch (error) {
    console.error('Get profile error:', error);
    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
    });
  }
});

// üö™ Logout (Optional - for token blacklisting in the future)
router.post('/logout', (req, res) => {
  // ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ client ‡∏à‡∏∞‡∏•‡∏ö token ‡πÄ‡∏≠‡∏á
  // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° token blacklisting
  return res.json({
    success: true,
    message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
  });
});

// üìã Check Login Status
router.get('/status', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(200).json({
        success: true,
        authenticated: false,
        message: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
      });
    }

    const token = authHeader.substring(7);
    const jwt = require('jsonwebtoken');
    
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      
      return res.json({
        success: true,
        authenticated: true,
        user: {
          id: decoded.userId,
          email: decoded.email,
          role: decoded.role,
          loginProvider: decoded.loginProvider,
          lineId: decoded.lineId,
        },
      });
    } catch (jwtError) {
      return res.status(200).json({
        success: true,
        authenticated: false,
        message: 'Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      });
    }
  } catch (error) {
    console.error('Check status error:', error);
    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
    });
  }
});

export default router; 