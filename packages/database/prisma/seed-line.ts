import { PrismaClient } from '@prisma/client';
import crypto from 'crypto';

const prisma = new PrismaClient();

// Function to hash password using Node.js crypto
function hashPassword(password: string): string {
  const salt = crypto.randomBytes(16).toString('hex');
  const hash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return `${salt}:${hash}`;
}

// Function to verify password (for future use)
function verifyPassword(password: string, hashedPassword: string): boolean {
  const [salt, hash] = hashedPassword.split(':');
  const verifyHash = crypto.pbkdf2Sync(password, salt, 1000, 64, 'sha512').toString('hex');
  return hash === verifyHash;
}

// Generate fake LINE ID for demo
function generateLineId(): string {
  return `U${crypto.randomBytes(16).toString('hex').substring(0, 32)}`;
}

async function main() {
  console.log('üîêüíö ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô LINE + Secure Seeding...');

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
  await prisma.order.deleteMany();
  await prisma.menuItem.deleteMany();
  await prisma.category.deleteMany();
  await prisma.restaurantUser.deleteMany();
  await prisma.restaurant.deleteMany();
  await prisma.user.deleteMany();

  console.log('üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');

  // ==================== ADMIN & STAFF ====================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Super Admin (Email/Password Login)
  const adminPassword = hashPassword('AdminSecure123!');
  const superAdmin = await prisma.user.create({
    data: {
      email: 'admin@theredpotion.com',
      password: adminPassword,
      firstName: 'Super',
      lastName: 'Admin',
      role: 'SUPER_ADMIN',
      status: 'ACTIVE',
      phone: '+66-2-000-0001',
      loginProvider: 'EMAIL',
    },
  });

  console.log('üëë Super Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß:', superAdmin.email);

  // ==================== RESTAURANTS ====================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 1: Pizza Palace
  const pizzaPalace = await prisma.restaurant.create({
    data: {
      name: 'Pizza Palace',
      slug: 'pizza-palace',
      description: '‡∏£‡πâ‡∏≤‡∏ô‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡πÅ‡∏™‡∏ô‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û',
      address: '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏ï‡∏¢ ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      zipCode: '10110',
      phone: '02-123-4567',
      email: 'info@pizzapalace.com',
      status: 'ACTIVE',
      logo: '/logos/pizza-palace.png',
      banner: '/banners/pizza-palace.jpg',
      primaryColor: '#e74c3c',
      secondaryColor: '#c0392b',
      avgDeliveryTime: 25,
      deliveryRadius: 5.0,
    },
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Owner ‡∏Ç‡∏≠‡∏á Pizza Palace (Email/Password Login)
  const ownerPassword = hashPassword('Owner123!');
  const pizzaOwner = await prisma.user.create({
    data: {
      email: 'owner@pizzapalace.com',
      password: ownerPassword,
      firstName: 'Mario',
      lastName: 'Rossi',
      role: 'RESTAURANT_OWNER',
      status: 'ACTIVE',
      phone: '+66-2-123-4567',
      loginProvider: 'EMAIL',
    },
  });

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Owner ‡∏Å‡∏±‡∏ö Restaurant
  await prisma.restaurantUser.create({
    data: {
      userId: pizzaOwner.id,
      restaurantId: pizzaPalace.id,
      role: 'OWNER',
    },
  });

  console.log('üçï Pizza Palace ‡∏û‡∏£‡πâ‡∏≠‡∏° Owner ‡πÅ‡∏•‡πâ‡∏ß');

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 2: Burger Bros
  const burgerBros = await prisma.restaurant.create({
    data: {
      name: 'Burger Bros',
      slug: 'burger-bros',
      description: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏±‡∏ô‡πÅ‡∏ó‡πâ ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏•‡∏¥‡∏®',
      address: '456 ‡∏ñ‡∏ô‡∏ô‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏° 4 ‡πÅ‡∏Ç‡∏ß‡∏á‡∏Ñ‡∏•‡∏≠‡∏á‡∏ï‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10500',
      city: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
      zipCode: '10500',
      phone: '02-234-5678',
      email: 'info@burgerbros.com',
      status: 'ACTIVE',
      logo: '/logos/burger-bros.png',
      banner: '/banners/burger-bros.jpg',
      primaryColor: '#f39c12',
      secondaryColor: '#e67e22',
      avgDeliveryTime: 20,
      deliveryRadius: 4.5,
    },
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pizza Palace
  await prisma.category.createMany({
    data: [
      {
        name: '‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Ñ',
        description: '‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ä‡∏≠‡∏ö',
        sortOrder: 1,
        isActive: true,
        restaurantId: pizzaPalace.id,
      },
      {
        name: '‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°',
        description: '‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤‡∏™‡∏π‡∏ï‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏•‡∏¥‡∏®',
        sortOrder: 2,
        isActive: true,
        restaurantId: pizzaPalace.id,
      },
      {
        name: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°',
        description: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏¢‡πá‡∏ô ‡πÜ ‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏û‡∏¥‡∏ã‡∏ã‡πà‡∏≤',
        sortOrder: 3,
        isActive: true,
        restaurantId: pizzaPalace.id,
      },
    ],
  });

  console.log('üçî Burger Bros ‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß');

  // ==================== CUSTOMERS (LINE LOGIN) ====================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ LINE Login
  const lineCustomers = await prisma.user.createMany({
    data: [
      {
        // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ LINE #1
        lineId: generateLineId(),
        lineDisplayName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
        lineEmail: 'somchai.line@example.com',
        linePictureUrl: 'https://profile.line-scdn.net/0h1a2b3c4d5e6f',
        firstName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢',
        lastName: '‡πÉ‡∏à‡∏î‡∏µ',
        role: 'CUSTOMER',
        status: 'ACTIVE',
        phone: '+66-81-111-1111',
        loginProvider: 'LINE',
      },
      {
        // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ LINE #2
        lineId: generateLineId(),
        lineDisplayName: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô',
        lineEmail: 'somying.line@example.com',
        linePictureUrl: 'https://profile.line-scdn.net/0h7f8e9d0c1b2a',
        firstName: '‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á',
        lastName: '‡∏£‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô',
        role: 'CUSTOMER',
        status: 'ACTIVE',
        phone: '+66-82-222-2222',
        loginProvider: 'LINE',
      },
      {
        // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ LINE #3
        lineId: generateLineId(),
        lineDisplayName: 'John LINE User',
        linePictureUrl: 'https://profile.line-scdn.net/0h9d8c7b6a5f4e',
        firstName: 'John',
        lastName: 'Doe',
        role: 'CUSTOMER',
        status: 'ACTIVE',
        phone: '+66-83-333-3333',
        loginProvider: 'LINE',
      },
    ],
  });

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Email/Password (‡∏ú‡∏™‡∏°)
  const customerPassword = hashPassword('Customer123!');
  const emailCustomers = await prisma.user.createMany({
    data: [
      {
        email: 'regular.customer@example.com',
        password: customerPassword,
        firstName: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        lastName: '‡∏õ‡∏Å‡∏ï‡∏¥',
        role: 'CUSTOMER',
        status: 'ACTIVE',
        phone: '+66-84-444-4444',
        loginProvider: 'EMAIL',
      },
    ],
  });

  console.log('üë•üíö ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ LINE Login: 3 ‡∏Ñ‡∏ô');
  console.log('üë•üìß ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ Email Login: 1 ‡∏Ñ‡∏ô');

  // ==================== RIDERS (EMAIL LOGIN) ====================
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Email/Password
  const riderPassword = hashPassword('Rider123!');
  const riders = await prisma.user.createMany({
    data: [
      {
        email: 'rider.rung@example.com',
        password: riderPassword,
        firstName: '‡∏ô‡∏≤‡∏¢‡∏£‡∏∏‡πà‡∏á',
        lastName: '‡∏™‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß',
        role: 'RIDER',
        status: 'ACTIVE',
        phone: '+66-85-555-5555',
        loginProvider: 'EMAIL',
      },
      {
        email: 'rider.raeng@example.com',
        password: riderPassword,
        firstName: '‡∏ô‡∏≤‡∏¢‡πÅ‡∏£‡∏á',
        lastName: '‡∏ß‡∏¥‡πà‡∏á‡πÑ‡∏ß',
        role: 'RIDER',
        status: 'ACTIVE',
        phone: '+66-86-666-6666',
        loginProvider: 'EMAIL',
      },
    ],
  });

  console.log('üèçÔ∏è ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå 2 ‡∏Ñ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß');

  console.log('\n‚úÖ LINE + Secure Seed ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
  console.log('\nüìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Login ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  
  console.log('\nüëë SUPER ADMIN (Email Login):');
  console.log('   Email: admin@theredpotion.com');
  console.log('   Password: AdminSecure123!');
  
  console.log('\nüçï RESTAURANT OWNER (Email Login):');
  console.log('   Email: owner@pizzapalace.com');
  console.log('   Password: Owner123!');
  
  console.log('\nüë•üíö CUSTOMERS (LINE Login):');
  console.log('   ‚úì ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ (LINE ID: U1234...)');
  console.log('   ‚úì ‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô (LINE ID: U5678...)');
  console.log('   ‚úì John LINE User (LINE ID: U9abc...)');
  
  console.log('\nüë•üìß CUSTOMERS (Email Login):');
  console.log('   Email: regular.customer@example.com');
  console.log('   Password: Customer123!');
  
  console.log('\nüèçÔ∏è RIDERS (Email Login):');
  console.log('   Email: rider.rung@example.com | Password: Rider123!');
  console.log('   Email: rider.raeng@example.com | Password: Rider123!');
  
  console.log('\nüîê Login Methods Summary:');
  console.log('   üìß Email/Password: Admin, Restaurant, Rider, Some Customers');
  console.log('   üíö LINE Login: Most Customers');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
}

main()
  .catch((e) => {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô LINE Seed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 