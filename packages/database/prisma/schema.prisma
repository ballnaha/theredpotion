// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Multi-tenant Food Delivery Platform Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String?  @unique // Optional สำหรับ LINE users
  password  String?  // Optional สำหรับ LINE users
  phone     String?
  firstName String?
  lastName  String?
  avatar    String?
  role      UserRole @default(CUSTOMER)
  status    UserStatus @default(ACTIVE)
  
  // LINE Login Support
  lineId        String? @unique // LINE User ID
  lineDisplayName String? // ชื่อที่แสดงใน LINE
  lineEmail     String? // Email จาก LINE (ถ้ามี)
  linePictureUrl String? // รูปโปรไฟล์จาก LINE
  
  // Login Methods
  loginProvider LoginProvider @default(EMAIL) // ระบุว่าใช้วิธีไหนในการ login
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relations
  restaurantUsers RestaurantUser[]
  customerOrders  Order[] @relation("CustomerOrders")
  riderInfo       Rider?
  
  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  RESTAURANT_OWNER
  RESTAURANT_STAFF
  CUSTOMER
  RIDER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum LoginProvider {
  EMAIL     // Email + Password (สำหรับ admin, restaurant, rider)
  LINE      // LINE Login (สำหรับ customer)
  BOTH      // รองรับทั้งสอง (flexibility)
}

// Restaurant Management
model Restaurant {
  id               String     @id @default(cuid())
  name             String
  slug             String     @unique // for subdomain
  domain           String?    @unique // custom domain
  description      String?
  phone            String?
  email            String?
  
  // Address
  address          String?
  city             String?
  state            String?
  zipCode          String?
  country          String?    @default("TH")
  latitude         Float?
  longitude        Float?
  deliveryRadius   Float?     @default(5.0) // km
  
  // Business Info
  businessLicense  String?
  taxId            String?
  avgDeliveryTime  Int?       @default(30) // minutes
  commissionRate   Float?     @default(0.15) // 15%
  
  // Branding
  logo             String?
  banner           String?
  primaryColor     String?    @default("#22C55E")
  secondaryColor   String?    @default("#16A34A")
  fontFamily       String?    @default("Inter")
  
  // Settings
  isOpen           Boolean    @default(true)
  status           RestaurantStatus @default(PENDING)
  
  // Timestamps
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  approvedAt       DateTime?
  
  // Relations
  users            RestaurantUser[]
  categories       Category[]
  menuItems        MenuItem[]
  orders           Order[]
  
  @@map("restaurants")
}

enum RestaurantStatus {
  PENDING
  APPROVED
  ACTIVE
  SUSPENDED
  INACTIVE
}

// Restaurant User Permissions
model RestaurantUser {
  id           String @id @default(cuid())
  userId       String
  restaurantId String
  role         RestaurantUserRole @default(STAFF)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@unique([userId, restaurantId])
  @@map("restaurant_users")
}

enum RestaurantUserRole {
  OWNER
  MANAGER
  STAFF
}

// Menu Management
model Category {
  id           String @id @default(cuid())
  restaurantId String
  name         String
  description  String?
  image        String?
  sortOrder    Int    @default(0)
  isActive     Boolean @default(true)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuItems    MenuItem[]
  
  @@map("categories")
}

model MenuItem {
  id           String @id @default(cuid())
  restaurantId String
  categoryId   String
  name         String
  description  String?
  price        Float
  image        String?
  
  // Pricing & Discounts
  originalPrice    Float? // ราคาเดิมก่อนลด
  discountPercent  Int?   // เปอร์เซ็นต์ลด (0-100)
  discountAmount   Float? // จำนวนเงินที่ลด
  discountStartAt  DateTime? // เริ่มลดเมื่อไร
  discountEndAt    DateTime? // สิ้นสุดลดเมื่อไร
  isOnSale         Boolean @default(false) // กำลังลดราคาอยู่หรือไม่
  
  // Nutrition & Details
  calories     Int?
  preparationTime Int? @default(15) // minutes
  spiceLevel   SpiceLevel? @default(MILD)
  
  // Availability
  isAvailable  Boolean @default(true)
  isVegetarian Boolean @default(false)
  isVegan      Boolean @default(false)
  isGlutenFree Boolean @default(false)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]
  
  @@map("menu_items")
}

enum SpiceLevel {
  MILD
  MEDIUM
  HOT
  EXTRA_HOT
}

// Order Management
model Order {
  id               String @id @default(cuid())
  orderNumber      String @unique
  restaurantId     String
  customerId       String
  riderId          String?
  
  // Order Details
  status           OrderStatus @default(PENDING)
  subtotal         Float
  deliveryFee      Float @default(0)
  serviceFee       Float @default(0)
  tax              Float @default(0)
  discount         Float @default(0)
  total            Float
  
  // Delivery Info
  deliveryAddress  String
  deliveryLat      Float?
  deliveryLng      Float?
  deliveryInstructions String?
  
  // Timing
  estimatedDeliveryTime DateTime?
  actualDeliveryTime    DateTime?
  
  // Payment
  paymentMethod    PaymentMethod @default(CASH)
  paymentStatus    PaymentStatus @default(PENDING)
  paidAt           DateTime?
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  restaurant       Restaurant @relation(fields: [restaurantId], references: [id])
  customer         User @relation("CustomerOrders", fields: [customerId], references: [id])
  rider            Rider? @relation(fields: [riderId], references: [id])
  items            OrderItem[]
  statusHistory    OrderStatusHistory[]
  
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  RIDER_ASSIGNED
  RIDER_EN_ROUTE_TO_RESTAURANT
  RIDER_AT_RESTAURANT
  PICKED_UP
  EN_ROUTE_TO_CUSTOMER
  ARRIVED_AT_CUSTOMER
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  DIGITAL_WALLET
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  menuItemId String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  notes      String?
  
  // Relations
  order      Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  
  @@map("order_items")
}

model OrderStatusHistory {
  id        String @id @default(cuid())
  orderId   String
  status    OrderStatus
  notes     String?
  latitude  Float?
  longitude Float?
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("order_status_history")
}

// Rider Management
model Rider {
  id              String @id @default(cuid())
  userId          String @unique
  vehicleType     VehicleType @default(MOTORCYCLE)
  licensePlate    String?
  currentLat      Float?
  currentLng      Float?
  isOnline        Boolean @default(false)
  isAvailable     Boolean @default(true)
  
  // Verification
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  
  // Performance
  rating             Float? @default(5.0)
  totalDeliveries    Int @default(0)
  completionRate     Float? @default(100.0)
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents       RiderDocument[]
  orders          Order[]
  locations       RiderLocation[]
  earnings        RiderEarning[]
  
  @@map("riders")
}

enum VehicleType {
  BICYCLE
  MOTORCYCLE
  CAR
  ELECTRIC_BIKE
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

model RiderDocument {
  id           String @id @default(cuid())
  riderId      String
  documentType DocumentType
  fileUrl      String
  status       DocumentStatus @default(PENDING)
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  verifiedAt   DateTime?
  expiresAt    DateTime?
  
  // Relations
  rider        Rider @relation(fields: [riderId], references: [id], onDelete: Cascade)
  
  @@map("rider_documents")
}

enum DocumentType {
  NATIONAL_ID
  DRIVING_LICENSE
  VEHICLE_REGISTRATION
  INSURANCE_CERTIFICATE
  BANK_ACCOUNT
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

// Real-time Tracking
model RiderLocation {
  id        String @id @default(cuid())
  riderId   String
  latitude  Float
  longitude Float
  heading   Float?
  speed     Float?
  
  // Timestamps
  createdAt DateTime @default(now())
  
  // Relations
  rider     Rider @relation(fields: [riderId], references: [id], onDelete: Cascade)
  
  @@map("rider_locations")
}

// Earnings & Payments
model RiderEarning {
  id           String @id @default(cuid())
  riderId      String
  orderId      String?
  type         EarningType @default(DELIVERY)
  baseFee      Float @default(0)
  distanceFee  Float @default(0)
  timeFee      Float @default(0)
  bonusFee     Float @default(0)
  totalEarning Float
  
  // Timestamps
  createdAt    DateTime @default(now())
  
  // Relations
  rider        Rider @relation(fields: [riderId], references: [id], onDelete: Cascade)
  
  @@map("rider_earnings")
}

enum EarningType {
  DELIVERY
  BONUS
  TIP
  ADJUSTMENT
}
